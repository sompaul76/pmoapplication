// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.capgemini.pmo.entity;

import com.capgemini.pmo.constant.AccountActiveStatus;
import com.capgemini.pmo.constant.EmpBand;
import com.capgemini.pmo.constant.EmpLevel;
import com.capgemini.pmo.constant.EmpLocation;
import com.capgemini.pmo.constant.EmployeeType;
import com.capgemini.pmo.constant.Gender;
import com.capgemini.pmo.dao.EmployeeMasterDAO;
import com.capgemini.pmo.entity.EmployeeMaster;
import com.capgemini.pmo.entity.EmployeeMasterDataOnDemand;
import com.capgemini.pmo.entity.IDPDataOnDemand;
import com.capgemini.pmo.entity.ServiceLineDataOnDemand;
import com.capgemini.pmo.entity.SkillsDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EmployeeMasterDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EmployeeMasterDataOnDemand: @Component;
    
    private Random EmployeeMasterDataOnDemand.rnd = new SecureRandom();
    
    private List<EmployeeMaster> EmployeeMasterDataOnDemand.data;
    
    @Autowired
    IDPDataOnDemand EmployeeMasterDataOnDemand.iDPDataOnDemand;
    
    @Autowired
    SkillsDataOnDemand EmployeeMasterDataOnDemand.skillsDataOnDemand;
    
    @Autowired
    ServiceLineDataOnDemand EmployeeMasterDataOnDemand.serviceLineDataOnDemand;
    
    @Autowired
    EmployeeMasterDAO EmployeeMasterDataOnDemand.employeeMasterDAO;
    
    public EmployeeMaster EmployeeMasterDataOnDemand.getNewTransientEmployeeMaster(int index) {
        EmployeeMaster obj = new EmployeeMaster();
        setBand(obj, index);
        setCgid(obj, index);
        setContentType(obj, index);
        setDob(obj, index);
        setDoj(obj, index);
        setEmail(obj, index);
        setEmplevel(obj, index);
        setEmpnum(obj, index);
        setEmpstatus(obj, index);
        setEmptype(obj, index);
        setGender(obj, index);
        setImage(obj, index);
        setIndustryexp(obj, index);
        setLocation(obj, index);
        setMobile(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void EmployeeMasterDataOnDemand.setBand(EmployeeMaster obj, int index) {
        EmpBand band = EmpBand.class.getEnumConstants()[0];
        obj.setBand(band);
    }
    
    public void EmployeeMasterDataOnDemand.setCgid(EmployeeMaster obj, int index) {
        String cgid = "cgid_" + index;
        if (cgid.length() > 10) {
            cgid = cgid.substring(0, 10);
        }
        obj.setCgid(cgid);
    }
    
    public void EmployeeMasterDataOnDemand.setContentType(EmployeeMaster obj, int index) {
        String contentType = "contentType_" + index;
        obj.setContentType(contentType);
    }
    
    public void EmployeeMasterDataOnDemand.setDob(EmployeeMaster obj, int index) {
        Calendar dob = Calendar.getInstance();
        obj.setDob(dob);
    }
    
    public void EmployeeMasterDataOnDemand.setDoj(EmployeeMaster obj, int index) {
        Calendar doj = Calendar.getInstance();
        obj.setDoj(doj);
    }
    
    public void EmployeeMasterDataOnDemand.setEmail(EmployeeMaster obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 100) {
            email = email.substring(0, 100);
        }
        obj.setEmail(email);
    }
    
    public void EmployeeMasterDataOnDemand.setEmplevel(EmployeeMaster obj, int index) {
        EmpLevel emplevel = EmpLevel.class.getEnumConstants()[0];
        obj.setEmplevel(emplevel);
    }
    
    public void EmployeeMasterDataOnDemand.setEmpnum(EmployeeMaster obj, int index) {
        BigDecimal empnum = BigDecimal.valueOf(index);
        if (empnum.compareTo(new BigDecimal("9999999999.9")) == 1) {
            empnum = new BigDecimal("9999999999.9");
        }
        obj.setEmpnum(empnum);
    }
    
    public void EmployeeMasterDataOnDemand.setEmpstatus(EmployeeMaster obj, int index) {
        AccountActiveStatus empstatus = AccountActiveStatus.class.getEnumConstants()[0];
        obj.setEmpstatus(empstatus);
    }
    
    public void EmployeeMasterDataOnDemand.setEmptype(EmployeeMaster obj, int index) {
        EmployeeType emptype = EmployeeType.class.getEnumConstants()[0];
        obj.setEmptype(emptype);
    }
    
    public void EmployeeMasterDataOnDemand.setGender(EmployeeMaster obj, int index) {
        Gender gender = Gender.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    public void EmployeeMasterDataOnDemand.setImage(EmployeeMaster obj, int index) {
        byte[] image = String.valueOf(index).getBytes();
        obj.setImage(image);
    }
    
    public void EmployeeMasterDataOnDemand.setIndustryexp(EmployeeMaster obj, int index) {
        BigDecimal industryexp = BigDecimal.valueOf(index);
        if (industryexp.compareTo(new BigDecimal("99.9")) == 1) {
            industryexp = new BigDecimal("99.9");
        }
        obj.setIndustryexp(industryexp);
    }
    
    public void EmployeeMasterDataOnDemand.setLocation(EmployeeMaster obj, int index) {
        EmpLocation location = EmpLocation.class.getEnumConstants()[0];
        obj.setLocation(location);
    }
    
    public void EmployeeMasterDataOnDemand.setMobile(EmployeeMaster obj, int index) {
        String mobile = "mobile_" + index;
        if (mobile.length() > 12) {
            mobile = mobile.substring(0, 12);
        }
        obj.setMobile(mobile);
    }
    
    public void EmployeeMasterDataOnDemand.setName(EmployeeMaster obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = name.substring(0, 100);
        }
        obj.setName(name);
    }
    
    public EmployeeMaster EmployeeMasterDataOnDemand.getSpecificEmployeeMaster(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        EmployeeMaster obj = data.get(index);
        Long id = obj.getId();
        return employeeMasterDAO.findOne(id);
    }
    
    public EmployeeMaster EmployeeMasterDataOnDemand.getRandomEmployeeMaster() {
        init();
        EmployeeMaster obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return employeeMasterDAO.findOne(id);
    }
    
    public boolean EmployeeMasterDataOnDemand.modifyEmployeeMaster(EmployeeMaster obj) {
        return false;
    }
    
    public void EmployeeMasterDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = employeeMasterDAO.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'EmployeeMaster' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<EmployeeMaster>();
        for (int i = 0; i < 10; i++) {
            EmployeeMaster obj = getNewTransientEmployeeMaster(i);
            try {
                employeeMasterDAO.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            employeeMasterDAO.flush();
            data.add(obj);
        }
    }
    
}
