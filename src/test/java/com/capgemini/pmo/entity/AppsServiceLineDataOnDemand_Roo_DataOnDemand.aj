// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.capgemini.pmo.entity;

import com.capgemini.pmo.constant.ActiveInactiveFlag;
import com.capgemini.pmo.dao.AppsServiceLineDAO;
import com.capgemini.pmo.entity.AppsServiceLine;
import com.capgemini.pmo.entity.AppsServiceLineDataOnDemand;
import com.capgemini.pmo.entity.IDP;
import com.capgemini.pmo.entity.IDPDataOnDemand;
import com.capgemini.pmo.entity.ServiceLine;
import com.capgemini.pmo.entity.ServiceLineDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AppsServiceLineDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AppsServiceLineDataOnDemand: @Component;
    
    private Random AppsServiceLineDataOnDemand.rnd = new SecureRandom();
    
    private List<AppsServiceLine> AppsServiceLineDataOnDemand.data;
    
    @Autowired
    IDPDataOnDemand AppsServiceLineDataOnDemand.iDPDataOnDemand;
    
    @Autowired
    ServiceLineDataOnDemand AppsServiceLineDataOnDemand.serviceLineDataOnDemand;
    
    @Autowired
    AppsServiceLineDAO AppsServiceLineDataOnDemand.appsServiceLineDAO;
    
    public AppsServiceLine AppsServiceLineDataOnDemand.getNewTransientAppsServiceLine(int index) {
        AppsServiceLine obj = new AppsServiceLine();
        setActive(obj, index);
        setIdp(obj, index);
        setServiceline(obj, index);
        return obj;
    }
    
    public void AppsServiceLineDataOnDemand.setActive(AppsServiceLine obj, int index) {
        ActiveInactiveFlag Active = ActiveInactiveFlag.class.getEnumConstants()[0];
        obj.setActive(Active);
    }
    
    public void AppsServiceLineDataOnDemand.setIdp(AppsServiceLine obj, int index) {
        IDP idp = iDPDataOnDemand.getRandomIDP();
        obj.setIdp(idp);
    }
    
    public void AppsServiceLineDataOnDemand.setServiceline(AppsServiceLine obj, int index) {
        ServiceLine serviceline = serviceLineDataOnDemand.getRandomServiceLine();
        obj.setServiceline(serviceline);
    }
    
    public AppsServiceLine AppsServiceLineDataOnDemand.getSpecificAppsServiceLine(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AppsServiceLine obj = data.get(index);
        Long id = obj.getId();
        return appsServiceLineDAO.findOne(id);
    }
    
    public AppsServiceLine AppsServiceLineDataOnDemand.getRandomAppsServiceLine() {
        init();
        AppsServiceLine obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return appsServiceLineDAO.findOne(id);
    }
    
    public boolean AppsServiceLineDataOnDemand.modifyAppsServiceLine(AppsServiceLine obj) {
        return false;
    }
    
    public void AppsServiceLineDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = appsServiceLineDAO.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AppsServiceLine' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AppsServiceLine>();
        for (int i = 0; i < 10; i++) {
            AppsServiceLine obj = getNewTransientAppsServiceLine(i);
            try {
                appsServiceLineDAO.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            appsServiceLineDAO.flush();
            data.add(obj);
        }
    }
    
}
