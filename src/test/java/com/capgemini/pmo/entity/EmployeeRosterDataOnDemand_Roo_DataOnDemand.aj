// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.capgemini.pmo.entity;

import com.capgemini.pmo.constant.AccountStatus;
import com.capgemini.pmo.constant.EmpBillability;
import com.capgemini.pmo.dao.EmployeeRosterDAO;
import com.capgemini.pmo.entity.EmployeeMaster;
import com.capgemini.pmo.entity.EmployeeMasterDataOnDemand;
import com.capgemini.pmo.entity.EmployeeRoster;
import com.capgemini.pmo.entity.EmployeeRosterDataOnDemand;
import com.capgemini.pmo.entity.Project;
import com.capgemini.pmo.entity.ProjectDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EmployeeRosterDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EmployeeRosterDataOnDemand: @Component;
    
    private Random EmployeeRosterDataOnDemand.rnd = new SecureRandom();
    
    private List<EmployeeRoster> EmployeeRosterDataOnDemand.data;
    
    @Autowired
    EmployeeMasterDataOnDemand EmployeeRosterDataOnDemand.employeeMasterDataOnDemand;
    
    @Autowired
    ProjectDataOnDemand EmployeeRosterDataOnDemand.projectDataOnDemand;
    
    @Autowired
    EmployeeRosterDAO EmployeeRosterDataOnDemand.employeeRosterDAO;
    
    public EmployeeRoster EmployeeRosterDataOnDemand.getNewTransientEmployeeRoster(int index) {
        EmployeeRoster obj = new EmployeeRoster();
        setAccntstartdate(obj, index);
        setAccountstatus(obj, index);
        setAvailability(obj, index);
        setBillability(obj, index);
        setEmp(obj, index);
        setPmocomments(obj, index);
        setProjectcode(obj, index);
        setRolloffdate(obj, index);
        setRolloffreason(obj, index);
        setSource(obj, index);
        setTaggingenddate(obj, index);
        setTaggingstartdate(obj, index);
        return obj;
    }
    
    public void EmployeeRosterDataOnDemand.setAccntstartdate(EmployeeRoster obj, int index) {
        Calendar accntstartdate = Calendar.getInstance();
        obj.setAccntstartdate(accntstartdate);
    }
    
    public void EmployeeRosterDataOnDemand.setAccountstatus(EmployeeRoster obj, int index) {
        AccountStatus accountstatus = AccountStatus.class.getEnumConstants()[0];
        obj.setAccountstatus(accountstatus);
    }
    
    public void EmployeeRosterDataOnDemand.setAvailability(EmployeeRoster obj, int index) {
        Integer availability = new Integer(index);
        if (availability > 100) {
            availability = 100;
        }
        obj.setAvailability(availability);
    }
    
    public void EmployeeRosterDataOnDemand.setBillability(EmployeeRoster obj, int index) {
        EmpBillability billability = EmpBillability.class.getEnumConstants()[0];
        obj.setBillability(billability);
    }
    
    public void EmployeeRosterDataOnDemand.setEmp(EmployeeRoster obj, int index) {
        EmployeeMaster emp = employeeMasterDataOnDemand.getRandomEmployeeMaster();
        obj.setEmp(emp);
    }
    
    public void EmployeeRosterDataOnDemand.setPmocomments(EmployeeRoster obj, int index) {
        String pmocomments = "pmocomments_" + index;
        if (pmocomments.length() > 250) {
            pmocomments = pmocomments.substring(0, 250);
        }
        obj.setPmocomments(pmocomments);
    }
    
    public void EmployeeRosterDataOnDemand.setProjectcode(EmployeeRoster obj, int index) {
        Project projectcode = projectDataOnDemand.getRandomProject();
        obj.setProjectcode(projectcode);
    }
    
    public void EmployeeRosterDataOnDemand.setRolloffdate(EmployeeRoster obj, int index) {
        Calendar rolloffdate = Calendar.getInstance();
        obj.setRolloffdate(rolloffdate);
    }
    
    public void EmployeeRosterDataOnDemand.setRolloffreason(EmployeeRoster obj, int index) {
        String rolloffreason = "rolloffreason_" + index;
        if (rolloffreason.length() > 100) {
            rolloffreason = rolloffreason.substring(0, 100);
        }
        obj.setRolloffreason(rolloffreason);
    }
    
    public void EmployeeRosterDataOnDemand.setSource(EmployeeRoster obj, int index) {
        String source = "source_" + index;
        if (source.length() > 50) {
            source = source.substring(0, 50);
        }
        obj.setSource(source);
    }
    
    public void EmployeeRosterDataOnDemand.setTaggingenddate(EmployeeRoster obj, int index) {
        Calendar taggingenddate = Calendar.getInstance();
        obj.setTaggingenddate(taggingenddate);
    }
    
    public void EmployeeRosterDataOnDemand.setTaggingstartdate(EmployeeRoster obj, int index) {
        Calendar taggingstartdate = Calendar.getInstance();
        obj.setTaggingstartdate(taggingstartdate);
    }
    
    public EmployeeRoster EmployeeRosterDataOnDemand.getSpecificEmployeeRoster(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        EmployeeRoster obj = data.get(index);
        Long id = obj.getId();
        return employeeRosterDAO.findOne(id);
    }
    
    public EmployeeRoster EmployeeRosterDataOnDemand.getRandomEmployeeRoster() {
        init();
        EmployeeRoster obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return employeeRosterDAO.findOne(id);
    }
    
    public boolean EmployeeRosterDataOnDemand.modifyEmployeeRoster(EmployeeRoster obj) {
        return false;
    }
    
    public void EmployeeRosterDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = employeeRosterDAO.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'EmployeeRoster' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<EmployeeRoster>();
        for (int i = 0; i < 10; i++) {
            EmployeeRoster obj = getNewTransientEmployeeRoster(i);
            try {
                employeeRosterDAO.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            employeeRosterDAO.flush();
            data.add(obj);
        }
    }
    
}
