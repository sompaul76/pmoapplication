// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.capgemini.pmo.entity;

import com.capgemini.pmo.constant.ActiveInactiveFlag;
import com.capgemini.pmo.dao.IDPDAO;
import com.capgemini.pmo.entity.BuisnessUnit;
import com.capgemini.pmo.entity.BuisnessUnitDataOnDemand;
import com.capgemini.pmo.entity.IDP;
import com.capgemini.pmo.entity.IDPDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect IDPDataOnDemand_Roo_DataOnDemand {
    
    declare @type: IDPDataOnDemand: @Component;
    
    private Random IDPDataOnDemand.rnd = new SecureRandom();
    
    private List<IDP> IDPDataOnDemand.data;
    
    @Autowired
    BuisnessUnitDataOnDemand IDPDataOnDemand.buisnessUnitDataOnDemand;
    
    @Autowired
    IDPDAO IDPDataOnDemand.iDPDAO;
    
    public IDP IDPDataOnDemand.getNewTransientIDP(int index) {
        IDP obj = new IDP();
        setActiveFlag(obj, index);
        setBuorg(obj, index);
        setIdphead(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void IDPDataOnDemand.setActiveFlag(IDP obj, int index) {
        ActiveInactiveFlag ActiveFlag = ActiveInactiveFlag.class.getEnumConstants()[0];
        obj.setActiveFlag(ActiveFlag);
    }
    
    public void IDPDataOnDemand.setBuorg(IDP obj, int index) {
        BuisnessUnit buorg = buisnessUnitDataOnDemand.getRandomBuisnessUnit();
        obj.setBuorg(buorg);
    }
    
    public void IDPDataOnDemand.setIdphead(IDP obj, int index) {
        String idphead = "idphead_" + index;
        if (idphead.length() > 100) {
            idphead = idphead.substring(0, 100);
        }
        obj.setIdphead(idphead);
    }
    
    public void IDPDataOnDemand.setName(IDP obj, int index) {
        String name = "name_" + index;
        if (name.length() > 50) {
            name = name.substring(0, 50);
        }
        obj.setName(name);
    }
    
    public IDP IDPDataOnDemand.getSpecificIDP(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        IDP obj = data.get(index);
        Long id = obj.getId();
        return iDPDAO.findOne(id);
    }
    
    public IDP IDPDataOnDemand.getRandomIDP() {
        init();
        IDP obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return iDPDAO.findOne(id);
    }
    
    public boolean IDPDataOnDemand.modifyIDP(IDP obj) {
        return false;
    }
    
    public void IDPDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = iDPDAO.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'IDP' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<IDP>();
        for (int i = 0; i < 10; i++) {
            IDP obj = getNewTransientIDP(i);
            try {
                iDPDAO.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            iDPDAO.flush();
            data.add(obj);
        }
    }
    
}
