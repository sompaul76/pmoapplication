// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.capgemini.pmo.entity;

import com.capgemini.pmo.constant.Currency;
import com.capgemini.pmo.dao.ProjectDAO;
import com.capgemini.pmo.entity.AccountDataOnDemand;
import com.capgemini.pmo.entity.IDP;
import com.capgemini.pmo.entity.IDPDataOnDemand;
import com.capgemini.pmo.entity.Project;
import com.capgemini.pmo.entity.ProjectDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProjectDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProjectDataOnDemand: @Component;
    
    private Random ProjectDataOnDemand.rnd = new SecureRandom();
    
    private List<Project> ProjectDataOnDemand.data;
    
    @Autowired
    AccountDataOnDemand ProjectDataOnDemand.accountDataOnDemand;
    
    @Autowired
    IDPDataOnDemand ProjectDataOnDemand.iDPDataOnDemand;
    
    @Autowired
    ProjectDAO ProjectDataOnDemand.projectDAO;
    
    public Project ProjectDataOnDemand.getNewTransientProject(int index) {
        Project obj = new Project();
        setBudcm(obj, index);
        setBudheadcount(obj, index);
        setBudpyrd(obj, index);
        setCurrency(obj, index);
        setDescription(obj, index);
        setEnddate(obj, index);
        setEngagmanager(obj, index);
        setIdpname(obj, index);
        setProjectCode(obj, index);
        setProjectName(obj, index);
        setProjmanager(obj, index);
        setRevenue(obj, index);
        setStartdate(obj, index);
        return obj;
    }
    
    public void ProjectDataOnDemand.setBudcm(Project obj, int index) {
        BigDecimal budcm = BigDecimal.valueOf(index);
        if (budcm.compareTo(new BigDecimal("999.99")) == 1) {
            budcm = new BigDecimal("999.99");
        }
        obj.setBudcm(budcm);
    }
    
    public void ProjectDataOnDemand.setBudheadcount(Project obj, int index) {
        BigDecimal budheadcount = BigDecimal.valueOf(index);
        if (budheadcount.compareTo(new BigDecimal("999.9")) == 1) {
            budheadcount = new BigDecimal("999.9");
        }
        obj.setBudheadcount(budheadcount);
    }
    
    public void ProjectDataOnDemand.setBudpyrd(Project obj, int index) {
        BigDecimal budpyrd = BigDecimal.valueOf(index);
        if (budpyrd.compareTo(new BigDecimal("99.9")) == 1) {
            budpyrd = new BigDecimal("99.9");
        }
        obj.setBudpyrd(budpyrd);
    }
    
    public void ProjectDataOnDemand.setCurrency(Project obj, int index) {
        Currency currency = Currency.class.getEnumConstants()[0];
        obj.setCurrency(currency);
    }
    
    public void ProjectDataOnDemand.setDescription(Project obj, int index) {
        String description = "description_" + index;
        if (description.length() > 100) {
            description = description.substring(0, 100);
        }
        obj.setDescription(description);
    }
    
    public void ProjectDataOnDemand.setEnddate(Project obj, int index) {
        Calendar enddate = Calendar.getInstance();
        obj.setEnddate(enddate);
    }
    
    public void ProjectDataOnDemand.setEngagmanager(Project obj, int index) {
        String engagmanager = "engagmanager_" + index;
        if (engagmanager.length() > 100) {
            engagmanager = engagmanager.substring(0, 100);
        }
        obj.setEngagmanager(engagmanager);
    }
    
    public void ProjectDataOnDemand.setIdpname(Project obj, int index) {
        IDP idpname = iDPDataOnDemand.getRandomIDP();
        obj.setIdpname(idpname);
    }
    
    public void ProjectDataOnDemand.setProjectCode(Project obj, int index) {
        String projectCode = "projectCode_" + index;
        if (projectCode.length() > 50) {
            projectCode = projectCode.substring(0, 50);
        }
        obj.setProjectCode(projectCode);
    }
    
    public void ProjectDataOnDemand.setProjectName(Project obj, int index) {
        String projectName = "projectName_" + index;
        if (projectName.length() > 100) {
            projectName = projectName.substring(0, 100);
        }
        obj.setProjectName(projectName);
    }
    
    public void ProjectDataOnDemand.setProjmanager(Project obj, int index) {
        String projmanager = "projmanager_" + index;
        if (projmanager.length() > 100) {
            projmanager = projmanager.substring(0, 100);
        }
        obj.setProjmanager(projmanager);
    }
    
    public void ProjectDataOnDemand.setRevenue(Project obj, int index) {
        BigDecimal revenue = BigDecimal.valueOf(index);
        if (revenue.compareTo(new BigDecimal("9999999999.99")) == 1) {
            revenue = new BigDecimal("9999999999.99");
        }
        obj.setRevenue(revenue);
    }
    
    public void ProjectDataOnDemand.setStartdate(Project obj, int index) {
        Calendar startdate = Calendar.getInstance();
        obj.setStartdate(startdate);
    }
    
    public Project ProjectDataOnDemand.getSpecificProject(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Project obj = data.get(index);
        Long id = obj.getId();
        return projectDAO.findOne(id);
    }
    
    public Project ProjectDataOnDemand.getRandomProject() {
        init();
        Project obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return projectDAO.findOne(id);
    }
    
    public boolean ProjectDataOnDemand.modifyProject(Project obj) {
        return false;
    }
    
    public void ProjectDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = projectDAO.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Project' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Project>();
        for (int i = 0; i < 10; i++) {
            Project obj = getNewTransientProject(i);
            try {
                projectDAO.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            projectDAO.flush();
            data.add(obj);
        }
    }
    
}
