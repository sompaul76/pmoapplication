// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.capgemini.pmo.controller;

import com.capgemini.pmo.constant.AccountStatus;
import com.capgemini.pmo.constant.EmpBillability;
import com.capgemini.pmo.controller.EmployeeRosterController;
import com.capgemini.pmo.dao.EmployeeMasterDAO;
import com.capgemini.pmo.dao.EmployeeRosterDAO;
import com.capgemini.pmo.dao.ProjectDAO;
import com.capgemini.pmo.entity.EmployeeMaster;
import com.capgemini.pmo.entity.EmployeeRoster;
import com.capgemini.pmo.entity.Project;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect EmployeeRosterController_Roo_Controller {
    
    @Autowired
    EmployeeMasterDAO EmployeeRosterController.employeeMasterDAO;
    
    @Autowired
    ProjectDAO EmployeeRosterController.projectDAO;
    
    @Autowired
    EmployeeRosterDAO EmployeeRosterController.employeeRosterDAO;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String EmployeeRosterController.create(@Valid EmployeeRoster employeeRoster, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, employeeRoster);
            return "employeerosters/create";
        }
        uiModel.asMap().clear();
        employeeRosterDAO.save(employeeRoster);
        return "redirect:/employeerosters/" + encodeUrlPathSegment(employeeRoster.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String EmployeeRosterController.createForm(Model uiModel) {
        populateEditForm(uiModel, new EmployeeRoster());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (employeeMasterDAO.count() == 0) {
            dependencies.add(new String[] { "emp", "employeemasters" });
        }
        if (projectDAO.count() == 0) {
            dependencies.add(new String[] { "projectcode", "projects" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "employeerosters/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String EmployeeRosterController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("employeeroster", employeeRosterDAO.findOne(id));
        uiModel.addAttribute("itemId", id);
        return "employeerosters/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String EmployeeRosterController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("employeerosters", EmployeeRoster.findEmployeeRosterEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) employeeRosterDAO.count() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("employeerosters", EmployeeRoster.findAllEmployeeRosters(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "employeerosters/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String EmployeeRosterController.update(@Valid EmployeeRoster employeeRoster, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, employeeRoster);
            return "employeerosters/update";
        }
        uiModel.asMap().clear();
        employeeRosterDAO.save(employeeRoster);
        return "redirect:/employeerosters/" + encodeUrlPathSegment(employeeRoster.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String EmployeeRosterController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, employeeRosterDAO.findOne(id));
        return "employeerosters/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String EmployeeRosterController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        EmployeeRoster employeeRoster = employeeRosterDAO.findOne(id);
        employeeRosterDAO.delete(employeeRoster);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/employeerosters";
    }
    
    void EmployeeRosterController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("employeeRoster_taggingstartdate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("employeeRoster_taggingenddate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("employeeRoster_rolloffdate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("employeeRoster_accntstartdate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void EmployeeRosterController.populateEditForm(Model uiModel, EmployeeRoster employeeRoster) {
        uiModel.addAttribute("employeeRoster", employeeRoster);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("accountstatuses", Arrays.asList(AccountStatus.values()));
        uiModel.addAttribute("empbillabilitys", Arrays.asList(EmpBillability.values()));
        uiModel.addAttribute("employeemasters", employeeMasterDAO.findAll());
        uiModel.addAttribute("projects", projectDAO.findAll());
    }
    
    String EmployeeRosterController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
