// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.capgemini.pmo.controller;

import com.capgemini.pmo.constant.ActiveInactiveFlag;
import com.capgemini.pmo.controller.AppsServiceLineController;
import com.capgemini.pmo.dao.AppsServiceLineDAO;
import com.capgemini.pmo.dao.IDPDAO;
import com.capgemini.pmo.dao.ServiceLineDAO;
import com.capgemini.pmo.dao.SkillsDAO;
import com.capgemini.pmo.entity.AppsServiceLine;
import com.capgemini.pmo.entity.IDP;
import com.capgemini.pmo.entity.ServiceLine;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect AppsServiceLineController_Roo_Controller {
    
    @Autowired
    IDPDAO AppsServiceLineController.iDPDAO;
    
    @Autowired
    ServiceLineDAO AppsServiceLineController.serviceLineDAO;
    
    @Autowired
    AppsServiceLineDAO AppsServiceLineController.appsServiceLineDAO;
    
    @Autowired
    SkillsDAO AppsServiceLineController.skillsDAO;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String AppsServiceLineController.create(@Valid AppsServiceLine appsServiceLine, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, appsServiceLine);
            return "appsservicelines/create";
        }
        uiModel.asMap().clear();
        appsServiceLineDAO.save(appsServiceLine);
        return "redirect:/appsservicelines/" + encodeUrlPathSegment(appsServiceLine.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String AppsServiceLineController.createForm(Model uiModel) {
        populateEditForm(uiModel, new AppsServiceLine());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (iDPDAO.count() == 0) {
            dependencies.add(new String[] { "idp", "idps" });
        }
        if (serviceLineDAO.count() == 0) {
            dependencies.add(new String[] { "serviceline", "servicelines" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "appsservicelines/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String AppsServiceLineController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("appsserviceline", appsServiceLineDAO.findOne(id));
        uiModel.addAttribute("itemId", id);
        return "appsservicelines/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String AppsServiceLineController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("appsservicelines", appsServiceLineDAO.findAll(new org.springframework.data.domain.PageRequest(firstResult / sizeNo, sizeNo)).getContent());
            float nrOfPages = (float) appsServiceLineDAO.count() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("appsservicelines", appsServiceLineDAO.findAll());
        }
        return "appsservicelines/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String AppsServiceLineController.update(@Valid AppsServiceLine appsServiceLine, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, appsServiceLine);
            return "appsservicelines/update";
        }
        uiModel.asMap().clear();
        appsServiceLineDAO.save(appsServiceLine);
        return "redirect:/appsservicelines/" + encodeUrlPathSegment(appsServiceLine.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String AppsServiceLineController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, appsServiceLineDAO.findOne(id));
        return "appsservicelines/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String AppsServiceLineController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        AppsServiceLine appsServiceLine = appsServiceLineDAO.findOne(id);
        appsServiceLineDAO.delete(appsServiceLine);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/appsservicelines";
    }
    
    void AppsServiceLineController.populateEditForm(Model uiModel, AppsServiceLine appsServiceLine) {
        uiModel.addAttribute("appsServiceLine", appsServiceLine);
        uiModel.addAttribute("activeinactiveflags", Arrays.asList(ActiveInactiveFlag.values()));
        uiModel.addAttribute("idps", iDPDAO.findAll());
        uiModel.addAttribute("servicelines", serviceLineDAO.findAll());
        uiModel.addAttribute("skillses", skillsDAO.findAll());
    }
    
    String AppsServiceLineController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
